// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protobuf/wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_GetChainSignMethod_FullMethodName                = "/wallet.WalletService/getChainSignMethod"
	WalletService_GetChainSchema_FullMethodName                    = "/wallet.WalletService/getChainSchema"
	WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName = "/wallet.WalletService/createKeyPairsExportPublicKeyList"
	WalletService_CreateKeyPairsWithAddresses_FullMethodName       = "/wallet.WalletService/createKeyPairsWithAddresses"
	WalletService_SignTransactionMessage_FullMethodName            = "/wallet.WalletService/signTransactionMessage"
	WalletService_BuildAndSignTransaction_FullMethodName           = "/wallet.WalletService/buildAndSignTransaction"
	WalletService_BuildAndSignBatchTransaction_FullMethodName      = "/wallet.WalletService/buildAndSignBatchTransaction"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetChainSignMethod(ctx context.Context, in *GetChainSignMethodRequest, opts ...grpc.CallOption) (*GetChainSignMethodResponse, error)
	GetChainSchema(ctx context.Context, in *GetChainSchemaRequest, opts ...grpc.CallOption) (*GetChainSchemaResponse, error)
	CreateKeyPairsExportPublicKeyList(ctx context.Context, in *CreateKeyPairAndExportPublicKeyRequest, opts ...grpc.CallOption) (*CreateKeyPairAndExportPublicKeyResponse, error)
	CreateKeyPairsWithAddresses(ctx context.Context, in *CreateKeyPairsWithAddressesRequest, opts ...grpc.CallOption) (*CreateKeyPairsWithAddressesResponse, error)
	// 根据 32 字节 hash的签名流程
	SignTransactionMessage(ctx context.Context, in *SignTransactionMessageRequest, opts ...grpc.CallOption) (*SignTransactionMessageResponse, error)
	// 完整的签名流程
	BuildAndSignTransaction(ctx context.Context, in *BuildAndSignTransactionRequest, opts ...grpc.CallOption) (*BuildAndSignTransactionResponse, error)
	BuildAndSignBatchTransaction(ctx context.Context, in *BuildAndSignBatchTransactionRequest, opts ...grpc.CallOption) (*BuildAndSignBatchTransactionResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetChainSignMethod(ctx context.Context, in *GetChainSignMethodRequest, opts ...grpc.CallOption) (*GetChainSignMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainSignMethodResponse)
	err := c.cc.Invoke(ctx, WalletService_GetChainSignMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetChainSchema(ctx context.Context, in *GetChainSchemaRequest, opts ...grpc.CallOption) (*GetChainSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainSchemaResponse)
	err := c.cc.Invoke(ctx, WalletService_GetChainSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateKeyPairsExportPublicKeyList(ctx context.Context, in *CreateKeyPairAndExportPublicKeyRequest, opts ...grpc.CallOption) (*CreateKeyPairAndExportPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyPairAndExportPublicKeyResponse)
	err := c.cc.Invoke(ctx, WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateKeyPairsWithAddresses(ctx context.Context, in *CreateKeyPairsWithAddressesRequest, opts ...grpc.CallOption) (*CreateKeyPairsWithAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyPairsWithAddressesResponse)
	err := c.cc.Invoke(ctx, WalletService_CreateKeyPairsWithAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignTransactionMessage(ctx context.Context, in *SignTransactionMessageRequest, opts ...grpc.CallOption) (*SignTransactionMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignTransactionMessageResponse)
	err := c.cc.Invoke(ctx, WalletService_SignTransactionMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) BuildAndSignTransaction(ctx context.Context, in *BuildAndSignTransactionRequest, opts ...grpc.CallOption) (*BuildAndSignTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildAndSignTransactionResponse)
	err := c.cc.Invoke(ctx, WalletService_BuildAndSignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) BuildAndSignBatchTransaction(ctx context.Context, in *BuildAndSignBatchTransactionRequest, opts ...grpc.CallOption) (*BuildAndSignBatchTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildAndSignBatchTransactionResponse)
	err := c.cc.Invoke(ctx, WalletService_BuildAndSignBatchTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations should embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	GetChainSignMethod(context.Context, *GetChainSignMethodRequest) (*GetChainSignMethodResponse, error)
	GetChainSchema(context.Context, *GetChainSchemaRequest) (*GetChainSchemaResponse, error)
	CreateKeyPairsExportPublicKeyList(context.Context, *CreateKeyPairAndExportPublicKeyRequest) (*CreateKeyPairAndExportPublicKeyResponse, error)
	CreateKeyPairsWithAddresses(context.Context, *CreateKeyPairsWithAddressesRequest) (*CreateKeyPairsWithAddressesResponse, error)
	// 根据 32 字节 hash的签名流程
	SignTransactionMessage(context.Context, *SignTransactionMessageRequest) (*SignTransactionMessageResponse, error)
	// 完整的签名流程
	BuildAndSignTransaction(context.Context, *BuildAndSignTransactionRequest) (*BuildAndSignTransactionResponse, error)
	BuildAndSignBatchTransaction(context.Context, *BuildAndSignBatchTransactionRequest) (*BuildAndSignBatchTransactionResponse, error)
}

// UnimplementedWalletServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) GetChainSignMethod(context.Context, *GetChainSignMethodRequest) (*GetChainSignMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainSignMethod not implemented")
}
func (UnimplementedWalletServiceServer) GetChainSchema(context.Context, *GetChainSchemaRequest) (*GetChainSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainSchema not implemented")
}
func (UnimplementedWalletServiceServer) CreateKeyPairsExportPublicKeyList(context.Context, *CreateKeyPairAndExportPublicKeyRequest) (*CreateKeyPairAndExportPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPairsExportPublicKeyList not implemented")
}
func (UnimplementedWalletServiceServer) CreateKeyPairsWithAddresses(context.Context, *CreateKeyPairsWithAddressesRequest) (*CreateKeyPairsWithAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPairsWithAddresses not implemented")
}
func (UnimplementedWalletServiceServer) SignTransactionMessage(context.Context, *SignTransactionMessageRequest) (*SignTransactionMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionMessage not implemented")
}
func (UnimplementedWalletServiceServer) BuildAndSignTransaction(context.Context, *BuildAndSignTransactionRequest) (*BuildAndSignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAndSignTransaction not implemented")
}
func (UnimplementedWalletServiceServer) BuildAndSignBatchTransaction(context.Context, *BuildAndSignBatchTransactionRequest) (*BuildAndSignBatchTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAndSignBatchTransaction not implemented")
}
func (UnimplementedWalletServiceServer) testEmbeddedByValue() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetChainSignMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainSignMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetChainSignMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetChainSignMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetChainSignMethod(ctx, req.(*GetChainSignMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetChainSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetChainSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetChainSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetChainSchema(ctx, req.(*GetChainSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateKeyPairsExportPublicKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairAndExportPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateKeyPairsExportPublicKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateKeyPairsExportPublicKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateKeyPairsExportPublicKeyList(ctx, req.(*CreateKeyPairAndExportPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateKeyPairsWithAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairsWithAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateKeyPairsWithAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateKeyPairsWithAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateKeyPairsWithAddresses(ctx, req.(*CreateKeyPairsWithAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignTransactionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignTransactionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SignTransactionMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignTransactionMessage(ctx, req.(*SignTransactionMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_BuildAndSignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildAndSignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).BuildAndSignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_BuildAndSignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).BuildAndSignTransaction(ctx, req.(*BuildAndSignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_BuildAndSignBatchTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildAndSignBatchTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).BuildAndSignBatchTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_BuildAndSignBatchTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).BuildAndSignBatchTransaction(ctx, req.(*BuildAndSignBatchTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getChainSignMethod",
			Handler:    _WalletService_GetChainSignMethod_Handler,
		},
		{
			MethodName: "getChainSchema",
			Handler:    _WalletService_GetChainSchema_Handler,
		},
		{
			MethodName: "createKeyPairsExportPublicKeyList",
			Handler:    _WalletService_CreateKeyPairsExportPublicKeyList_Handler,
		},
		{
			MethodName: "createKeyPairsWithAddresses",
			Handler:    _WalletService_CreateKeyPairsWithAddresses_Handler,
		},
		{
			MethodName: "signTransactionMessage",
			Handler:    _WalletService_SignTransactionMessage_Handler,
		},
		{
			MethodName: "buildAndSignTransaction",
			Handler:    _WalletService_BuildAndSignTransaction_Handler,
		},
		{
			MethodName: "buildAndSignBatchTransaction",
			Handler:    _WalletService_BuildAndSignBatchTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/wallet.proto",
}
